{"data":{"allRemoteCodeContent":{"nodes":[{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-sdk/refs/heads/main/zenwave-sdk-cli/src/main/java/io/zenwave360/sdk/zdl/layouts/CleanHexagonalProjectLayout.java","originalUrl":"https://github.com/ZenWave360/zenwave-sdk/blob/main/zenwave-sdk-cli/src/main/java/io/zenwave360/sdk/zdl/layouts/CleanHexagonalProjectLayout.java","sourceUrl":"https://github.com/ZenWave360/zenwave-sdk/blob/main/zenwave-sdk-cli/src/main/java/io/zenwave360/sdk/zdl/layouts/CleanHexagonalProjectLayout.java#L3-L33","language":"java","visibleRange":"3,33","content":"/**\n * Hexagonal Architecture (also called Ports and Adapters) with a Clean separation of concerns, following Domain-Driven Design (DDD) and Event-Driven Architecture (EDA) principles.\n *\n * <pre>\n * ðŸ“¦ {{basePackage}}\n *    ðŸ“¦ adapters\n *        â””â”€ web\n *        |  â””â”€ RestControllers (spring mvc)\n *        â””â”€ events\n *           â””â”€ *EventListeners (spring-cloud-streams)\n *    ðŸ“¦ core\n *        â”œâ”€ ðŸ“¦ domain\n *        |     â””â”€ (entities and aggregates)\n *        â”œâ”€ ðŸ“¦ inbound\n *        |     â”œâ”€ dtos/\n *        |     â””â”€ ServiceInterface (inbound service interface)\n *        â”œâ”€ ðŸ“¦ outbound\n *        |     â”œâ”€ mongodb\n *        |     |  â””â”€ *RepositoryInterface (spring-data interface)\n *        |     â””â”€ jpa\n *        |        â””â”€ *RepositoryInterface (spring-data interface)\n *        â””â”€ ðŸ“¦ implementation\n *              â”œâ”€ mappers/\n *              â””â”€ ServiceImplementation (inbound service implementation)\n *    ðŸ“¦ infrastructure\n *      â”œâ”€ mongodb\n *      |  â””â”€ CustomRepositoryImpl (spring-data custom implementation)\n *      â””â”€ jpa\n *         â””â”€ CustomRepositoryImpl (spring-data custom implementation)\n * </pre>\n */","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-sdk/refs/heads/main/zenwave-sdk-cli/src/main/java/io/zenwave360/sdk/zdl/layouts/CleanHexagonalProjectLayout.java:3,33"},{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/customer-address-jpa/zenwave-model.zdl","originalUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/customer-address-jpa/zenwave-model.zdl","sourceUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/customer-address-jpa/zenwave-model.zdl","language":"zdl","visibleRange":null,"content":"/**\n * Sample ZenWave Model Definition.\n * Use zenwave-scripts.zdl to generate your code from this model definition.\n */\nconfig {\n    title \"ZenWave Customer JPA Example\"\n    basePackage \"io.zenwave360.example\"\n    persistence jpa\n    databaseType postgresql\n\n    // these should match the values of openapi-generator-maven-plugin\n    // used by the OpenAPIControllersPlugin and SpringWebTestClientPlugin\n    openApiApiPackage \"{{basePackage}}.adapters.web\"\n    openApiModelPackage \"{{basePackage}}.adapters.web.model\"\n    openApiModelNameSuffix DTO\n}\n\n/**\n* Customer entity\n*/\n@aggregate\n@auditing // adds auditing fields to the entity\nentity Customer {\n    name String required maxlength(254) /** Customer name */\n    email String required maxlength(254)\n    /** Customer Addresses can be stored in a JSON column in the database. */\n    @json addresses Address[] minlength(1) maxlength(5) {\n        street String required maxlength(254)\n        city String required maxlength(254)\n    }\n}\n\n@auditing\nentity PaymentMethod {\n    type PaymentMethodType required\n    cardNumber String required\n}\n\nenum PaymentMethodType { VISA(1), MASTERCARD(2) }\n\nrelationship OneToMany {\n    Customer{paymentMethods required maxlength(3)} to PaymentMethod{customer required}\n}\n\n// you can create 'inputs' as dtos for your service methods, or use entities directly\ninput CustomerSearchCriteria {\n    name String\n    email String\n    city String\n    state String\n}\n\n@rest(\"/customers\")\nservice CustomerService for (Customer) {\n    @post\n    createCustomer(Customer) Customer withEvents CustomerEvent\n    @get(\"/{id}\")\n    getCustomer(id) Customer?\n    @put(\"/{id}\")\n    updateCustomer(id, Customer) Customer? withEvents CustomerEvent\n    @delete(\"/{id}\")\n    deleteCustomer(id) withEvents CustomerDeletedEvent\n    @post(\"/search\")\n    @paginated\n    searchCustomers(CustomerSearchCriteria) Customer[]\n}\n\n@copy(Customer)\n@asyncapi({ channel: \"CustomersChannel\", topic: \"customers\" })\nevent CustomerEvent {\n    id Long required\n    version Integer\n    // all fields from Customer are copied here, but not relationships\n    paymentMethods PaymentMethod[]\n}\n\n@asyncapi({ channel: \"CustomersChannel\", topic: \"customers\" })\nevent CustomerDeletedEvent {\n    id Long required\n}\n","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/customer-address-jpa/zenwave-model.zdl:full"},{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/zenwave-jpa-baseline/zenwave-scripts.zw","originalUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/zenwave-jpa-baseline/zenwave-scripts.zw","sourceUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/zenwave-jpa-baseline/zenwave-scripts.zw","language":"zdl","visibleRange":null,"content":"// This is a ZenWave Scripts File (.zw)\n//\n// This file defines ZenWave SDK plugins and their configurations for SDK execution and code generation.\n//\n// Usage:\n// - Execute plugins using the Play button in IntelliJ IDEA ZenWave Model Editor\n// - Or Copy the generated command line hovering the play button on each plugin\n// - Or Run commands directly from terminal using the generated command line\n//\n// Plugin: https://plugins.jetbrains.com/plugin/22858-zenwave-domain-model-editor-for-zdl\n//\n// There are global properties that apply to all plugins, and plugin specific properties.\n// Configuration Precedence (highest to lowest):\n// 1. Command line arguments always have the highest precedence\n// 2. Plugin-specific properties (defined in this file)\n// 3. Global properties (defined in this file)\n// 4. Properties from referenced .zdl files\n//\nconfig {\n\n    // This is a global configuration that applies to all plugins.\n    zdlFile \"zenwave-model.zdl\"\n\n\n    // these should match the values of openapi-generator-maven-plugin\n    // used by the OpenAPIControllersPlugin and SpringWebTestClientPlugin\n    openApiApiPackage \"{{basePackage}}.adapters.web\"\n    openApiModelPackage \"{{basePackage}}.adapters.web.model\"\n    openApiModelNameSuffix DTO\n\n\n    plugins {\n        /** Generates an OpenAPI 3.0 specification from the ZDL model. */\n        ZDLToOpenAPIPlugin {\n            idType integer\n            idTypeFormat int64\n            targetFile \"src/main/resources/public/apis/openapi.yml\"\n        }\n        /** Generates an AsyncAPI 3.0 specification from the ZDL model. */\n        ZDLToAsyncAPIPlugin {\n            asyncapiVersion v3\n            idType integer\n            idTypeFormat int64\n            targetFile \"src/main/resources/public/apis/asyncapi.yml\"\n            // includeKafkaCommonHeaders true\n        }\n        /** Generates a Backend Application from the ZDL model. (Headless Core) */\n        BackendApplicationDefaultPlugin {\n            useLombok true\n            includeEmitEventsImplementation true\n            // --force // overwite all files\n        }\n        /** Generates Spring MVC controllers from the OpenAPI specification (Web Adapters). */\n        OpenAPIControllersPlugin {\n            openapiFile \"src/main/resources/public/apis/openapi.yml\"\n        }\n\n        SpringWebTestClientPlugin {\n            openapiFile \"src/main/resources/public/apis/openapi.yml\"\n        }\n\n        SpringWebTestClientPlugin {\n            openapiFile \"src/main/resources/public/apis/openapi.yml\"\n            groupBy businessFlow\n            businessFlowTestName CreateUpdateDeleteCustomerIntegrationTest\n            operationIds createCustomer,updateCustomer,deleteCustomer,getCustomer\n        }\n\n        OpenAPIKaratePlugin {\n            openapiFile \"src/main/resources/public/apis/openapi.yml\"\n        }\n\n        OpenAPIKaratePlugin {\n            openapiFile \"src/main/resources/public/apis/openapi.yml\"\n            groupBy businessFlow\n            businessFlowTestName CreateUpdateDeleteCustomerKarateTest\n            operationIds createCustomer,updateCustomer,deleteCustomer,getCustomer\n        }\n    }\n}\n","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/zenwave-jpa-baseline/zenwave-scripts.zw:full"},{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/kustomer-address-jpa/zenwave-model.zdl","originalUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/kustomer-address-jpa/zenwave-model.zdl","sourceUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/kustomer-address-jpa/zenwave-model.zdl","language":"zdl","visibleRange":null,"content":"/**\n * Sample ZenWave Model Definition.\n * Use zenwave-scripts.zdl to generate your code from this model definition.\n */\nconfig {\n    title \"Project Name\"\n    basePackage \"io.zenwave360.examples.kotlin\"\n    persistence jpa\n    databaseType postgresql\n\n    // you can choose: DefaultProjectLayout, CleanHexagonalProjectLayout, LayeredProjectLayout, SimpleDomainProjectLayout, HexagonalProjectLayout, CleanArchitectureProjectLayout\n    layout LayeredProjectLayout\n\n    // these should match the values of openapi-generator-maven-plugin\n    // used by the OpenAPIControllersPlugin and SpringWebTestClientPlugin\n    layout.openApiApiPackage \"{{basePackage}}.web\"\n    layout.openApiModelPackage \"{{basePackage}}.web.dtos\"\n    openApiModelNameSuffix DTO\n}\n\n/**\n* Customer entity\n*/\n@aggregate\n@auditing // adds auditing fields to the entity\nentity Customer {\n    name String required maxlength(254) /** Customer name */\n    email String required maxlength(254) pattern(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/)\n    /** Customer Addresses can be stored in a JSON column in the database. */\n    @json addresses Address[] minlength(1) maxlength(5) {\n        street String required maxlength(254)\n        city String required maxlength(254)\n    }\n}\n\n@auditing\nentity PaymentMethod {\n    type PaymentMethodType required\n    cardNumber String required\n}\n\nenum PaymentMethodType { VISA(1), MASTERCARD(2) }\n\nrelationship OneToMany {\n    @eager\n    Customer{paymentMethods required maxlength(3)} to PaymentMethod{customer required}\n}\n\n// you can create 'inputs' as dtos for your service methods, or use entities directly\ninput CustomerSearchCriteria {\n    name String\n    email String\n    city String\n    state String\n}\n\n@rest(\"/customers\")\nservice CustomerService for (Customer) {\n    @post\n    createCustomer(Customer) Customer withEvents CustomerEvent\n    @get(\"/{customerId}\")\n    getCustomer(id) Customer?\n    @put(\"/{customerId}\")\n    updateCustomer(id, Customer) Customer? withEvents CustomerEvent\n    @delete(\"/{customerId}\")\n    deleteCustomer(id) withEvents CustomerEvent\n    @post({path: \"/search\", status: 200}) @paginated\n    searchCustomers(CustomerSearchCriteria) Customer[]\n}\n\n@copy(Customer)\n@asyncapi({ channel: \"CustomersChannel\", topic: \"customers\" })\nevent CustomerEvent {\n    id Long\n    version Integer\n    // all fields from Customer are copied here, but not relationships\n    paymentMethods PaymentMethod[]\n}\n","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/kustomer-address-jpa/zenwave-model.zdl:full"},{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/kustomer-address-jpa/zenwave-scripts.zw","originalUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/kustomer-address-jpa/zenwave-scripts.zw","sourceUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/kustomer-address-jpa/zenwave-scripts.zw","language":"zdl","visibleRange":null,"content":"// Error fetching content from https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/kustomer-address-jpa/zenwave-scripts.zw\n// HTTP 404: Not Found","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/kustomer-address-jpa/zenwave-scripts.zw:full"},{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/zenwave-jpa-baseline/zenwave-model.zdl","originalUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/zenwave-jpa-baseline/zenwave-model.zdl","sourceUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/zenwave-jpa-baseline/zenwave-model.zdl","language":"zdl","visibleRange":null,"content":"/**\n * Sample ZenWave Model Definition.\n *\n * This model describes a simple Customer entity with a one-to-many relationship with PaymentMethod.\n *\n * Use zenwave-scripts.zw to generate your code from this model definition.\n */\nconfig {\n    title \"ZenWave SDK - Mongodb BaseLine\"\n    basePackage \"io.zenwave360.example\"\n    persistence jpa\n    databaseType postgresql\n\n    // you can choose: DefaultProjectLayout, LayeredProjectLayout, SimpleDomainProjectLayout\n    //                 CleanHexagonalProjectLayout, HexagonalProjectLayout, CleanArchitectureProjectLayout\n    layout LayeredProjectLayout\n}\n\n/**\n* Customer entity\n*/\n@aggregate\n@auditing // adds auditing fields to the entity\nentity Customer {\n    name String required maxlength(254) /** Customer name */\n    email String required maxlength(254) pattern(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/)\n    /** Customer Addresses can be stored in a JSON column in the database. */\n    @json addresses Address[] minlength(1) maxlength(5) {\n        street String required maxlength(254)\n        city String required maxlength(254)\n    }\n}\n\n@auditing\nentity PaymentMethod {\n    type PaymentMethodType required\n    cardNumber String required\n}\n\nenum PaymentMethodType { VISA(1), MASTERCARD(2) }\n\nrelationship OneToMany {\n    @eager\n    Customer{paymentMethods required maxlength(3)} to PaymentMethod{customer required}\n}\n\n// you can create 'inputs' as dtos for your service methods, or use entities directly\ninput CustomerSearchCriteria {\n    name String\n    email String\n    city String\n    state String\n}\n\n@rest(\"/customers\")\nservice CustomerService for (Customer) {\n    @post\n    createCustomer(Customer) Customer withEvents CustomerEvent\n    @get(\"/{id}\")\n    getCustomer(id) Customer?\n    @put(\"/{id}\")\n    updateCustomer(id, Customer) Customer? withEvents CustomerEvent\n    @delete(\"/{id}\")\n    deleteCustomer(id) withEvents CustomerEvent\n    @post(\"/search\")\n    @paginated\n    searchCustomers(CustomerSearchCriteria) Customer[]\n}\n\n@copy(Customer)\n@asyncapi({ channel: \"CustomersChannel\", topic: \"customers\" })\nevent CustomerEvent {\n    id Long\n    version Integer\n    // all fields from Customer are copied here, but not relationships\n    paymentMethods PaymentMethod[]\n}\n","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/zenwave-jpa-baseline/zenwave-model.zdl:full"},{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/customer-address-jpa/zenwave-scripts.zw","originalUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/customer-address-jpa/zenwave-scripts.zw","sourceUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/customer-address-jpa/zenwave-scripts.zw","language":"zdl","visibleRange":null,"content":"config {\n    zdlFile \"zenwave-model.zdl\"\n\n    plugins {\n\n        ZDLToOpenAPIPlugin {\n            idType integer\n            idTypeFormat int64\n            targetFile \"src/main/resources/public/apis/openapi.yml\"\n        }\n\n        ZDLToAsyncAPIPlugin {\n            asyncapiVersion v3\n            schemaFormat avro\n            avroPackage \"io.zenwave360.example.core.outbound.events.dtos\"\n            idType long\n            targetFile \"src/main/resources/public/apis/asyncapi.yml\"\n            includeKafkaCommonHeaders true\n        }\n\n        BackendApplicationDefaultPlugin {\n            useLombok true\n            includeEmitEventsImplementation true\n            // --force // overwite all files\n        }\n\n        OpenAPIControllersPlugin {\n            openapiFile \"src/main/resources/public/apis/openapi.yml\"\n        }\n\n        SpringWebTestClientPlugin {\n            openapiFile \"src/main/resources/public/apis/openapi.yml\"\n        }\n\n        SpringWebTestClientPlugin {\n            openapiFile \"src/main/resources/public/apis/openapi.yml\"\n            groupBy businessFlow\n            businessFlowTestName CreateUpdateDeleteCustomerIntegrationTest\n            operationIds createCustomer,updateCustomer,deleteCustomer,getCustomer\n        }\n\n        OpenAPIKaratePlugin {\n            openapiFile \"src/main/resources/public/apis/openapi.yml\"\n        }\n\n        OpenAPIKaratePlugin {\n            openapiFile \"src/main/resources/public/apis/openapi.yml\"\n            groupBy businessFlow\n            businessFlowTestName CreateUpdateDeleteCustomerKarateTest\n            operationIds createCustomer,updateCustomer,deleteCustomer,getCustomer\n        }\n    }\n}\n","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/customer-address-jpa/zenwave-scripts.zw:full"},{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-sdk/refs/heads/main/zenwave-sdk-cli/src/main/java/io/zenwave360/sdk/zdl/layouts/LayeredProjectLayout.java","originalUrl":"https://github.com/ZenWave360/zenwave-sdk/blob/main/zenwave-sdk-cli/src/main/java/io/zenwave360/sdk/zdl/layouts/LayeredProjectLayout.java","sourceUrl":"https://github.com/ZenWave360/zenwave-sdk/blob/main/zenwave-sdk-cli/src/main/java/io/zenwave360/sdk/zdl/layouts/LayeredProjectLayout.java#L3-L33","language":"java","visibleRange":"3,33","content":"/**\n * Simple domain project layout.\n *\n * <pre>\n * ðŸ“¦ {{basePackage}}                            # Root package\n *    ðŸ“¦ config                                  # Spring Boot configuration, security, etc.\n *    ðŸ“¦ domain                                  # Domain Layer (Business Entities and Events)\n *        â”œâ”€ *Entities\n *        â””â”€ events/\n *           â””â”€ *DomainEvents\n *    ðŸ“¦ repository                              # Repository Layer (Persistence and Data Access)\n *        â”œâ”€ {{persistence}}/\n *        |   â”œâ”€ *RepositoryInterface            # Persistence interface (Spring Data, etc.)\n *        |   â””â”€ *RepositoryImpl                 # Repository implementation\n *    ðŸ“¦ events                                  # Events Layer (Internal and Async API Events)\n *        â”œâ”€ *EventListeners                     # Event listeners\n *    ðŸ“¦ commands                                # Command Layer (Command Handlers)\n *        â”œâ”€ *CommandHandlers                   # Command handlers (e.g., CQRS commands)\n *    ðŸ“¦ service                                 # Service Layer (Business Logic and DTOs)\n *        â”œâ”€ dtos/\n *        |   â””â”€ *DTOs                           # Data Transfer Objects\n *        â”œâ”€ impl/\n *        |   â””â”€ *ServiceImplementation          # Service implementations\n *        â””â”€ impl/mappers/\n *            â””â”€ *Mappers                        # Object mappers for transformations\n *    ðŸ“¦ web                                     # Web Layer (Controllers and API)\n *        â”œâ”€ *RestControllers                   # REST controllers (Spring MVC, etc.)\n *        â””â”€ mappers/\n *           â””â”€ *WebMappers                     # Mappers for web layer transformations\n * </pre>\n */","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-sdk/refs/heads/main/zenwave-sdk-cli/src/main/java/io/zenwave360/sdk/zdl/layouts/LayeredProjectLayout.java:3,33"},{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-sdk/refs/heads/main/zenwave-sdk-cli/src/main/java/io/zenwave360/sdk/zdl/layouts/LayeredProjectLayout.java","originalUrl":"https://github.com/ZenWave360/zenwave-sdk/blob/main/zenwave-sdk-cli/src/main/java/io/zenwave360/sdk/zdl/layouts/LayeredProjectLayout.java","sourceUrl":"https://github.com/ZenWave360/zenwave-sdk/blob/main/zenwave-sdk-cli/src/main/java/io/zenwave360/sdk/zdl/layouts/LayeredProjectLayout.java#L3-L33","language":"java","visibleRange":"3,33","content":"/**\n * Simple domain project layout.\n *\n * <pre>\n * ðŸ“¦ {{basePackage}}                            # Root package\n *    ðŸ“¦ config                                  # Spring Boot configuration, security, etc.\n *    ðŸ“¦ domain                                  # Domain Layer (Business Entities and Events)\n *        â”œâ”€ *Entities\n *        â””â”€ events/\n *           â””â”€ *DomainEvents\n *    ðŸ“¦ repository                              # Repository Layer (Persistence and Data Access)\n *        â”œâ”€ {{persistence}}/\n *        |   â”œâ”€ *RepositoryInterface            # Persistence interface (Spring Data, etc.)\n *        |   â””â”€ *RepositoryImpl                 # Repository implementation\n *    ðŸ“¦ events                                  # Events Layer (Internal and Async API Events)\n *        â”œâ”€ *EventListeners                     # Event listeners\n *    ðŸ“¦ commands                                # Command Layer (Command Handlers)\n *        â”œâ”€ *CommandHandlers                   # Command handlers (e.g., CQRS commands)\n *    ðŸ“¦ service                                 # Service Layer (Business Logic and DTOs)\n *        â”œâ”€ dtos/\n *        |   â””â”€ *DTOs                           # Data Transfer Objects\n *        â”œâ”€ impl/\n *        |   â””â”€ *ServiceImplementation          # Service implementations\n *        â””â”€ impl/mappers/\n *            â””â”€ *Mappers                        # Object mappers for transformations\n *    ðŸ“¦ web                                     # Web Layer (Controllers and API)\n *        â”œâ”€ *RestControllers                   # REST controllers (Spring MVC, etc.)\n *        â””â”€ mappers/\n *           â””â”€ *WebMappers                     # Mappers for web layer transformations\n * </pre>\n */","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-sdk/refs/heads/main/zenwave-sdk-cli/src/main/java/io/zenwave360/sdk/zdl/layouts/LayeredProjectLayout.java:3,33"},{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-sdk/refs/heads/main/zenwave-sdk-cli/src/main/java/io/zenwave360/sdk/zdl/layouts/CleanHexagonalProjectLayout.java","originalUrl":"https://github.com/ZenWave360/zenwave-sdk/blob/main/zenwave-sdk-cli/src/main/java/io/zenwave360/sdk/zdl/layouts/CleanHexagonalProjectLayout.java","sourceUrl":"https://github.com/ZenWave360/zenwave-sdk/blob/main/zenwave-sdk-cli/src/main/java/io/zenwave360/sdk/zdl/layouts/CleanHexagonalProjectLayout.java#L3-L33","language":"java","visibleRange":"3,33","content":"/**\n * Hexagonal Architecture (also called Ports and Adapters) with a Clean separation of concerns, following Domain-Driven Design (DDD) and Event-Driven Architecture (EDA) principles.\n *\n * <pre>\n * ðŸ“¦ {{basePackage}}\n *    ðŸ“¦ adapters\n *        â””â”€ web\n *        |  â””â”€ RestControllers (spring mvc)\n *        â””â”€ events\n *           â””â”€ *EventListeners (spring-cloud-streams)\n *    ðŸ“¦ core\n *        â”œâ”€ ðŸ“¦ domain\n *        |     â””â”€ (entities and aggregates)\n *        â”œâ”€ ðŸ“¦ inbound\n *        |     â”œâ”€ dtos/\n *        |     â””â”€ ServiceInterface (inbound service interface)\n *        â”œâ”€ ðŸ“¦ outbound\n *        |     â”œâ”€ mongodb\n *        |     |  â””â”€ *RepositoryInterface (spring-data interface)\n *        |     â””â”€ jpa\n *        |        â””â”€ *RepositoryInterface (spring-data interface)\n *        â””â”€ ðŸ“¦ implementation\n *              â”œâ”€ mappers/\n *              â””â”€ ServiceImplementation (inbound service implementation)\n *    ðŸ“¦ infrastructure\n *      â”œâ”€ mongodb\n *      |  â””â”€ CustomRepositoryImpl (spring-data custom implementation)\n *      â””â”€ jpa\n *         â””â”€ CustomRepositoryImpl (spring-data custom implementation)\n * </pre>\n */","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-sdk/refs/heads/main/zenwave-sdk-cli/src/main/java/io/zenwave360/sdk/zdl/layouts/CleanHexagonalProjectLayout.java:3,33"},{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-sdk/refs/heads/main/zenwave-sdk-cli/src/main/java/io/zenwave360/sdk/zdl/layouts/SimpleDomainProjectLayout.java","originalUrl":"https://github.com/ZenWave360/zenwave-sdk/blob/main/zenwave-sdk-cli/src/main/java/io/zenwave360/sdk/zdl/layouts/SimpleDomainProjectLayout.java","sourceUrl":"https://github.com/ZenWave360/zenwave-sdk/blob/main/zenwave-sdk-cli/src/main/java/io/zenwave360/sdk/zdl/layouts/SimpleDomainProjectLayout.java#L3-L33","language":"java","visibleRange":"3,33","content":"/**\n * Simple domain project layout.\n *\n * <pre>\n * ðŸ“¦ {{basePackage}}\n *    â””â”€ ðŸ“¦ config\n *    â””â”€ ðŸ“¦ model (entities and aggregates)\n *    â””â”€ ðŸ“¦ dtos\n *    â””â”€ ðŸ“¦ events\n *    â”œâ”€ ðŸ“¦ mappers\n *    â”œâ”€ *EventListeners (spring-cloud-streams)\n *    â”œâ”€ *RestControllers (spring mvc)\n *    â”œâ”€ ServiceImplementation\n *    â””â”€ *RepositoryInterface\n * </pre>\n */\npublic class SimpleDomainProjectLayout extends ProjectLayout {\n\n    {\n        basePackage = \"{{basePackage}}\";\n        // in case of modular project\n        configPackage = \"{{basePackage}}.config\";\n        commonPackage = \"{{basePackage}}\"; // set to \"{{basePackage}}.common\" in modular projects\n        modulesPackage = \"{{basePackage}}.modules\";\n\n        // module specific\n        moduleBasePackage = \"{{basePackage}}\";\n        moduleConfigPackage = \"{{moduleBasePackage}}.config\";\n\n        // domain entities and events\n        entitiesPackage = \"{{moduleBasePackage}}.domain\";","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-sdk/refs/heads/main/zenwave-sdk-cli/src/main/java/io/zenwave360/sdk/zdl/layouts/SimpleDomainProjectLayout.java:3,33"},{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-sdk/refs/heads/main/zenwave-sdk-cli/src/main/java/io/zenwave360/sdk/zdl/layouts/SimpleDomainProjectLayout.java","originalUrl":"https://github.com/ZenWave360/zenwave-sdk/blob/main/zenwave-sdk-cli/src/main/java/io/zenwave360/sdk/zdl/layouts/SimpleDomainProjectLayout.java","sourceUrl":"https://github.com/ZenWave360/zenwave-sdk/blob/main/zenwave-sdk-cli/src/main/java/io/zenwave360/sdk/zdl/layouts/SimpleDomainProjectLayout.java#L3-L33","language":"java","visibleRange":"3,33","content":"/**\n * Simple domain project layout.\n *\n * <pre>\n * ðŸ“¦ {{basePackage}}\n *    â””â”€ ðŸ“¦ config\n *    â””â”€ ðŸ“¦ model (entities and aggregates)\n *    â””â”€ ðŸ“¦ dtos\n *    â””â”€ ðŸ“¦ events\n *    â”œâ”€ ðŸ“¦ mappers\n *    â”œâ”€ *EventListeners (spring-cloud-streams)\n *    â”œâ”€ *RestControllers (spring mvc)\n *    â”œâ”€ ServiceImplementation\n *    â””â”€ *RepositoryInterface\n * </pre>\n */\npublic class SimpleDomainProjectLayout extends ProjectLayout {\n\n    {\n        basePackage = \"{{basePackage}}\";\n        // in case of modular project\n        configPackage = \"{{basePackage}}.config\";\n        commonPackage = \"{{basePackage}}\"; // set to \"{{basePackage}}.common\" in modular projects\n        modulesPackage = \"{{basePackage}}.modules\";\n\n        // module specific\n        moduleBasePackage = \"{{basePackage}}\";\n        moduleConfigPackage = \"{{moduleBasePackage}}.config\";\n\n        // domain entities and events\n        entitiesPackage = \"{{moduleBasePackage}}.domain\";","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-sdk/refs/heads/main/zenwave-sdk-cli/src/main/java/io/zenwave360/sdk/zdl/layouts/SimpleDomainProjectLayout.java:3,33"},{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/customer-address-jpa/zenwave-model.zdl","originalUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/customer-address-jpa/zenwave-model.zdl","sourceUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/customer-address-jpa/zenwave-model.zdl","language":"zdl","visibleRange":null,"content":"/**\n * Sample ZenWave Model Definition.\n * Use zenwave-scripts.zdl to generate your code from this model definition.\n */\nconfig {\n    title \"ZenWave Customer JPA Example\"\n    basePackage \"io.zenwave360.example\"\n    persistence jpa\n    databaseType postgresql\n\n    // these should match the values of openapi-generator-maven-plugin\n    // used by the OpenAPIControllersPlugin and SpringWebTestClientPlugin\n    openApiApiPackage \"{{basePackage}}.adapters.web\"\n    openApiModelPackage \"{{basePackage}}.adapters.web.model\"\n    openApiModelNameSuffix DTO\n}\n\n/**\n* Customer entity\n*/\n@aggregate\n@auditing // adds auditing fields to the entity\nentity Customer {\n    name String required maxlength(254) /** Customer name */\n    email String required maxlength(254)\n    /** Customer Addresses can be stored in a JSON column in the database. */\n    @json addresses Address[] minlength(1) maxlength(5) {\n        street String required maxlength(254)\n        city String required maxlength(254)\n    }\n}\n\n@auditing\nentity PaymentMethod {\n    type PaymentMethodType required\n    cardNumber String required\n}\n\nenum PaymentMethodType { VISA(1), MASTERCARD(2) }\n\nrelationship OneToMany {\n    Customer{paymentMethods required maxlength(3)} to PaymentMethod{customer required}\n}\n\n// you can create 'inputs' as dtos for your service methods, or use entities directly\ninput CustomerSearchCriteria {\n    name String\n    email String\n    city String\n    state String\n}\n\n@rest(\"/customers\")\nservice CustomerService for (Customer) {\n    @post\n    createCustomer(Customer) Customer withEvents CustomerEvent\n    @get(\"/{id}\")\n    getCustomer(id) Customer?\n    @put(\"/{id}\")\n    updateCustomer(id, Customer) Customer? withEvents CustomerEvent\n    @delete(\"/{id}\")\n    deleteCustomer(id) withEvents CustomerDeletedEvent\n    @post(\"/search\")\n    @paginated\n    searchCustomers(CustomerSearchCriteria) Customer[]\n}\n\n@copy(Customer)\n@asyncapi({ channel: \"CustomersChannel\", topic: \"customers\" })\nevent CustomerEvent {\n    id Long required\n    version Integer\n    // all fields from Customer are copied here, but not relationships\n    paymentMethods PaymentMethod[]\n}\n\n@asyncapi({ channel: \"CustomersChannel\", topic: \"customers\" })\nevent CustomerDeletedEvent {\n    id Long required\n}\n","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/customer-address-jpa/zenwave-model.zdl:full"},{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-sdk/refs/heads/main/zenwave-sdk-cli/src/main/java/io/zenwave360/sdk/zdl/layouts/HexagonalProjectLayout.java","originalUrl":"https://github.com/ZenWave360/zenwave-sdk/blob/main/zenwave-sdk-cli/src/main/java/io/zenwave360/sdk/zdl/layouts/HexagonalProjectLayout.java","sourceUrl":"https://github.com/ZenWave360/zenwave-sdk/blob/main/zenwave-sdk-cli/src/main/java/io/zenwave360/sdk/zdl/layouts/HexagonalProjectLayout.java#L3-L35","language":"java","visibleRange":"3,35","content":"/**\n * Hexagonal project layout.\n *\n * <pre>\n * ðŸ“¦ {{basePackage}}\n *    ðŸ“¦ domain                         # Domain model (Entities, Aggregates, Value Objects)\n *        â””â”€ *Entities\n *        |\n *    ðŸ“¦ ports                          # Port interfaces\n *        â”œâ”€ inbound                   # Primary ports (driving adapters)\n *        |   â””â”€ UserServicePort       # Interface for business logic (input)\n *        â””â”€ outbound                  # Secondary ports (driven adapters)\n *            â””â”€ UserRepositoryPort    # Interface for persistence (output)\n *        |\n *    ðŸ“¦ application                   # Application core (business logic services)\n *        â”œâ”€ services                 # Service implementations\n *        |   â””â”€ UserServiceImpl      # Implements UserServicePort, uses UserRepositoryPort\n *        â””â”€ mappers                 # Optional: Mapping between entities and DTOs\n *        |\n *    ðŸ“¦ adapters                      # Interface adapters (controllers, repositories, listeners)\n *        â”œâ”€ web                     # Web adapter (e.g., REST)\n *        |   â””â”€ UserController      # Calls UserServicePort\n *        â”œâ”€ persistence             # Persistence adapters\n *        |   â”œâ”€ mongodb/\n *        |   |   â””â”€ MongoUserRepository (implements UserRepositoryPort)\n *        |   â””â”€ jpa/\n *        |       â””â”€ JpaUserRepository (implements UserRepositoryPort)\n *        â””â”€ events                  # Event-driven adapters\n *            â””â”€ UserEventListener   # Listens to events, calls UserServicePort\n *        |\n *    ðŸ“¦ config                  # Spring Boot configurations\n * </pre>\n */","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-sdk/refs/heads/main/zenwave-sdk-cli/src/main/java/io/zenwave360/sdk/zdl/layouts/HexagonalProjectLayout.java:3,35"},{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/customer-address-jpa/src/main/resources/public/apis/openapi.yml","originalUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/customer-address-jpa/src/main/resources/public/apis/openapi.yml","sourceUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/customer-address-jpa/src/main/resources/public/apis/openapi.yml","language":"yaml","visibleRange":null,"content":"openapi: 3.0.1\ninfo:\n  title: \"ZenWave Customer JPA Example\"\n  version: 0.0.1\n  description: \"ZenWave Customer JPA Example\"\n  contact:\n    email: email@domain.com\nservers:\n  - description: localhost\n    url: http://localhost:8080/api\n  - description: custom\n    url: \"{protocol}://{server}/{path}\"\n    variables:\n      protocol:\n        enum: ['http', 'https']\n        default: 'http'\n      server:\n        default: 'localhost:8080'\n      path:\n        default: 'api'\ntags:\n  - name: \"Default\"\n  - name: \"Customer\"\n\n\npaths:\n  /customers:\n    post:\n      operationId: createCustomer\n      description: \"createCustomer\"\n      tags: [Customer]\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Customer\"\n      responses:\n        \"201\":\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Customer\"\n  /customers/{id}:\n    get:\n      operationId: getCustomer\n      description: \"getCustomer\"\n      tags: [Customer]\n      parameters:\n        - name: \"id\"\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Customer\"\n    put:\n      operationId: updateCustomer\n      description: \"updateCustomer\"\n      tags: [Customer]\n      parameters:\n        - name: \"id\"\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Customer\"\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Customer\"\n    delete:\n      operationId: deleteCustomer\n      description: \"deleteCustomer\"\n      tags: [Customer]\n      parameters:\n        - name: \"id\"\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"204\":\n          description: \"OK\"\n  /customers/search:\n    post:\n      operationId: searchCustomers\n      description: \"searchCustomers\"\n      tags: [Customer]\n      parameters:\n        - $ref: \"#/components/parameters/page\"\n        - $ref: \"#/components/parameters/limit\"\n        - $ref: \"#/components/parameters/sort\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CustomerSearchCriteria\"\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CustomerPaginated\"\n\ncomponents:\n  schemas:\n    Customer:\n      type: \"object\"\n      x-business-entity: \"Customer\"\n      required:\n      - \"name\"\n      - \"email\"\n      properties:\n        id:\n          type: \"integer\"\n          format: \"int64\"\n        version:\n          type: \"integer\"\n        name:\n          type: \"string\"\n          maxLength: 254\n          description: \"Customer name\"\n        email:\n          type: \"string\"\n          maxLength: 254\n          pattern: \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,4}\"\n          description: \"\"\n        addresses:\n          type: \"array\"\n          items:\n            $ref: \"#/components/schemas/Address\"\n            minLength: 1\n            maxLength: 5\n        paymentMethods:\n          type: \"array\"\n          items:\n            $ref: \"#/components/schemas/PaymentMethod\"\n    CustomerPaginated:\n      allOf:\n      - $ref: \"#/components/schemas/Page\"\n      - x-business-entity-paginated: \"Customer\"\n      - properties:\n          content:\n            type: \"array\"\n            items:\n              $ref: \"#/components/schemas/Customer\"\n    CustomerSearchCriteria:\n      type: \"object\"\n      x-business-entity: \"CustomerSearchCriteria\"\n      properties:\n        name:\n          type: \"string\"\n        email:\n          type: \"string\"\n        city:\n          type: \"string\"\n        state:\n          type: \"string\"\n    PaymentMethodType:\n      type: \"string\"\n      x-business-entity: \"PaymentMethodType\"\n      enum:\n      - \"VISA\"\n      - \"MASTERCARD\"\n    Address:\n      type: \"object\"\n      x-business-entity: \"Address\"\n      required:\n      - \"street\"\n      - \"city\"\n      properties:\n        street:\n          type: \"string\"\n          maxLength: 254\n        city:\n          type: \"string\"\n          maxLength: 254\n    PaymentMethod:\n      type: \"object\"\n      x-business-entity: \"PaymentMethod\"\n      required:\n      - \"type\"\n      - \"cardNumber\"\n      properties:\n        id:\n          type: \"integer\"\n          format: \"int64\"\n        version:\n          type: \"integer\"\n        type:\n          $ref: \"#/components/schemas/PaymentMethodType\"\n        cardNumber:\n          type: \"string\"\n\n    Page:\n      type: object\n      required:\n        - \"content\"\n        - \"totalElements\"\n        - \"totalPages\"\n        - \"size\"\n        - \"number\"\n      properties:\n        number:\n          type: integer\n          minimum: 0\n        numberOfElements:\n          type: integer\n          minimum: 0\n        size:\n          type: integer\n          minimum: 0\n          maximum: 200\n          multipleOf: 25\n        totalElements:\n          type: integer\n        totalPages:\n          type: integer\n\n  parameters:\n    page:\n      name: page\n      in: query\n      description: The number of results page\n      schema:\n        type: integer\n        format: int32\n        default: 0\n    limit:\n      name: limit\n      in: query\n      description: The number of results in a single page\n      schema:\n        type: integer\n        format: int32\n        default: 20\n    sort:\n      name: sort\n      in: query\n      description: The number of results page\n      schema:\n        type: array\n        items:\n          type: string\n\n  securitySchemes:\n    basicAuth:     # <-- arbitrary name for the security scheme\n      type: http\n      scheme: basic\n    bearerAuth:     # <-- arbitrary name for the security scheme\n      type: http\n      scheme: bearer\n      bearerFormat: JWT    # optional, arbitrary value for documentation purposes\n\nsecurity:\n  - basicAuth: []  # <-- use the same name here\n  - bearerAuth: []  # <-- use the same name here\n\n","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/customer-address-jpa/src/main/resources/public/apis/openapi.yml:full"},{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/customer-address-jpa/src/main/resources/public/apis/asyncapi.yml","originalUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/customer-address-jpa/src/main/resources/public/apis/asyncapi.yml","sourceUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/customer-address-jpa/src/main/resources/public/apis/asyncapi.yml","language":"yaml","visibleRange":null,"content":"asyncapi: 3.0.0\ninfo:\n  title: \"ZenWave Customer JPA Example\"\n  version: 0.0.1\n  tags:\n    - name: \"Default\"\n    - name: \"Customer\"\n\ndefaultContentType: application/json\n\nchannels:\n  CustomersChannel:\n    address: \"customers\"\n    messages:\n      CustomerDeletedEventMessage:\n        $ref: '#/components/messages/CustomerDeletedEventMessage'\n      CustomerEventMessage:\n        $ref: '#/components/messages/CustomerEventMessage'\n\noperations:\n  onCustomerEvent:\n    action: send\n    tags:\n      - name: Customer\n    channel:\n      $ref: '#/channels/CustomersChannel'\n  onCustomerDeletedEvent:\n    action: send\n    tags:\n      - name: Customer\n    channel:\n      $ref: '#/channels/CustomersChannel'\n\n\ncomponents:\n  messages:\n    CustomerEventMessage:\n      name: CustomerEventMessage\n      title: \"\"\n      summary: \"\"\n      traits:\n        - $ref: '#/components/messageTraits/CommonHeaders'\n      payload:\n        schemaFormat: application/vnd.apache.avro+json;version=1.9.0\n        schema:\n          $ref: \"avro/CustomerEvent.avsc\"\n    CustomerDeletedEventMessage:\n      name: CustomerDeletedEventMessage\n      title: \"\"\n      summary: \"\"\n      traits:\n        - $ref: '#/components/messageTraits/CommonHeaders'\n      payload:\n        schemaFormat: application/vnd.apache.avro+json;version=1.9.0\n        schema:\n          $ref: \"avro/CustomerDeletedEvent.avsc\"\n\n  messageTraits:\n    CommonHeaders:\n      headers:\n        type: object\n        properties:\n          kafka_messageKey:\n            type: \"long\"\n            \n            description: This header value will be populated automatically at runtime\n            x-runtime-expression: $message.payload#/id\n\n\n","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/customer-address-jpa/src/main/resources/public/apis/asyncapi.yml:full"},{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/zenwave-scripts.zw","originalUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/zenwave-scripts.zw","sourceUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/zenwave-scripts.zw","language":"zdl","visibleRange":null,"content":"config {\n    title \"Clinical Tool Backend\"\n    basePackage \"io.zenwave360.example.clinicaltool\"\n    persistence jpa\n    databaseType postgresql\n\n    layout.commonPackage \"{{basePackage}}.common\"\n    layout.infrastructureRepositoryCommonPackage \"{{commonPackage}}\"\n    layout.adaptersWebMappersCommonPackage \"{{commonPackage}}.mappers\"\n    layout.coreImplementationMappersCommonPackage \"{{commonPackage}}.mappers\"\n\n    // these should match the values of openapi-generator-maven-plugin\n    openApiModelNameSuffix DTO\n    // used by ZDLToOpenAPIPlugin\n    idType integer\n    idTypeFormat int64\n\n    // BackendApplicationDefaultPlugin\n    useLombok true\n    useSpringModulith true\n\n    haltOnFailFormatting false\n\n\n    plugins {\n\n        ZDLToOpenAPIPlugin {\n            title \"Clinical Tool - WebApp API\"\n            zdlFiles \"models/clinical.zdl\"\n            targetFile \"src/main/resources/public/apis/webapp-openapi.yml\"\n            operationIdsToExclude \"getPatientProfileById\"\n        }\n\n        ZDLToOpenAPIPlugin {\n            title \"Clinical Tool - Mobile API\"\n            zdlFiles \"models/clinical.zdl\"\n            targetFile \"src/main/resources/public/apis/mobile-openapi.yml\"\n            operationIdsToInclude \"getPatientProfileById,requestOptOut\"\n        }\n\n        ZDLToOpenAPIPlugin {\n            title \"Surveys - Backoffice API\"\n            zdlFile \"models/surveys.zdl\"\n            targetFile \"src/main/resources/public/apis/surveys-backoffice-openapi.yml\"\n            operationIdsToExclude \"getSurveyAndQuestionsForPatient,answerSurvey,updateSurveyAnswers,getSurveyAnswers\"\n        }\n\n        ZDLToOpenAPIPlugin {\n            title \"Surveys - Public API\"\n            zdlFile \"models/surveys.zdl\"\n            targetFile \"src/main/resources/public/apis/surveys-public-openapi.yml\"\n            operationIdsToInclude \"getSurveyAndQuestionsForPatient,answerSurvey,updateSurveyAnswers,getSurveyAnswers\"\n        }\n\n        ZDLToOpenAPIPlugin {\n            title \"Documents API\"\n            zdlFile \"models/documents.zdl\"\n            targetFile \"src/main/resources/public/apis/documents-openapi.yml\"\n        }\n\n        ZDLToOpenAPIPlugin {\n            title \"Master Data API\"\n            zdlFiles \"models/masterdata.zdl\"\n            targetFile \"src/main/resources/public/apis/masterdata-openapi.yml\"\n        }\n\n        ZDLToOpenAPIPlugin {\n            title \"Terms And Conditions API\"\n            zdlFiles \"models/terms-and-conditions.zdl\"\n            targetFile \"src/main/resources/public/apis/terms-and-conditions-openapi.yml\"\n        }\n\n        ZDLToOpenAPIPlugin {\n            title \"User Managament API\"\n            zdlFiles \"models/users.zdl\"\n            openapiOverlayFiles \"src/main/resources/public/apis/user-additionalproperties-overlay.yml\"\n            targetFile \"src/main/resources/public/apis/users-openapi.yml\"\n        }\n\n\n        //-----------------------------\n\n        BackendApplicationDefaultPlugin {\n            zdlFile \"models/clinical.zdl\"\n            // --force // overwite all files\n        }\n\n        BackendApplicationDefaultPlugin {\n            zdlFile \"models/surveys.zdl\"\n            // --force // overwite all files\n        }\n\n        BackendApplicationDefaultPlugin {\n            zdlFile \"models/documents.zdl\"\n            // --force // overwite all files\n        }\n\n        BackendApplicationDefaultPlugin {\n            zdlFile \"models/masterdata.zdl\"\n            // --force // overwite all files\n        }\n\n        BackendApplicationDefaultPlugin {\n            zdlFile \"models/terms-and-conditions.zdl\"\n            // --force // overwite all files\n        }\n\n        BackendApplicationDefaultPlugin {\n            zdlFile \"models/users.zdl\"\n            // --force // overwite all files\n        }\n\n\n        //-----------------------------\n\n        OpenAPIControllersPlugin {\n            zdlFiles \"models/clinical.zdl\"\n            openapiFile \"src/main/resources/public/apis/webapp-openapi.yml\"\n\n            layout.customWebModule \"{{basePackage}}.modules.web.webapp\"\n            layout.adaptersWebPackage \"{{layout.customWebModule}}\"\n            layout.openApiApiPackage \"{{layout.customWebModule}}\"\n            layout.openApiModelPackage \"{{layout.customWebModule}}.dtos\"\n        }\n\n        OpenAPIControllersPlugin {\n            zdlFiles \"models/clinical.zdl\"\n            openapiFile \"src/main/resources/public/apis/mobile-openapi.yml\"\n\n            layout.customWebModule \"{{basePackage}}.modules.web.mobile\"\n            layout.adaptersWebPackage \"{{layout.customWebModule}}\"\n            layout.openApiApiPackage \"{{layout.customWebModule}}\"\n            layout.openApiModelPackage \"{{layout.customWebModule}}.dtos\"\n        }\n\n        OpenAPIControllersPlugin {\n            zdlFiles \"models/surveys.zdl\"\n            openapiFile \"src/main/resources/public/apis/surveys-backoffice-openapi.yml\"\n        }\n\n        OpenAPIControllersPlugin {\n            zdlFiles \"models/surveys.zdl\"\n            openapiFile \"src/main/resources/public/apis/surveys-public-openapi.yml\"\n        }\n\n        OpenAPIControllersPlugin {\n            zdlFiles \"models/documents.zdl\"\n            openapiFile \"src/main/resources/public/apis/documents-openapi.yml\"\n        }\n\n        OpenAPIControllersPlugin {\n            zdlFiles \"models/masterdata.zdl\"\n            openapiFile \"src/main/resources/public/apis/masterdata-openapi.yml\"\n        }\n\n        OpenAPIControllersPlugin {\n            zdlFiles \"models/terms-and-conditions.zdl\"\n            openapiFile \"src/main/resources/public/apis/terms-and-conditions-openapi.yml\"\n        }\n\n        OpenAPIControllersPlugin {\n            zdlFiles \"models/users.zdl\"\n            openapiFile \"src/main/resources/public/apis/users-openapi.yml\"\n        }\n\n        //-----------------------------\n\n        SpringWebTestClientPlugin {\n            zdlFiles \"models/clinical.zdl,models/metrics.zdl\"\n            openapiFile \"src/main/resources/public/apis/webapp-openapi.yml\"\n\n            layout.customWebModule \"{{basePackage}}.modules.web.webapp\"\n            layout.adaptersWebPackage \"{{layout.customWebModule}}\"\n            layout.openApiApiPackage \"{{layout.customWebModule}}\"\n            layout.openApiModelPackage \"{{layout.customWebModule}}.dtos\"\n        }\n\n        SpringWebTestClientPlugin {\n            zdlFiles \"models/clinical.zdl,models/metrics.zdl\"\n            openapiFile \"src/main/resources/public/apis/mobile-openapi.yml\"\n\n            layout.customWebModule \"{{basePackage}}.modules.web.mobile\"\n            layout.adaptersWebPackage \"{{layout.customWebModule}}\"\n            layout.openApiApiPackage \"{{layout.customWebModule}}\"\n            layout.openApiModelPackage \"{{layout.customWebModule}}.dtos\"\n        }\n\n        SpringWebTestClientPlugin {\n            zdlFiles \"models/surveys.zdl\"\n            openapiFile \"src/main/resources/public/apis/surveys-backoffice-openapi.yml\"\n        }\n\n        SpringWebTestClientPlugin {\n            zdlFiles \"models/surveys.zdl\"\n            openapiFile \"src/main/resources/public/apis/surveys-public-openapi.yml\"\n        }\n\n        SpringWebTestClientPlugin {\n            zdlFiles \"models/documents.zdl\"\n            openapiFile \"src/main/resources/public/apis/documents-openapi.yml\"\n        }\n\n        SpringWebTestClientPlugin {\n            zdlFiles \"models/masterdata.zdl\"\n            openapiFile \"src/main/resources/public/apis/masterdata-openapi.yml\"\n        }\n\n        SpringWebTestClientPlugin {\n            zdlFiles \"models/terms-and-conditions.zdl\"\n            openapiFile \"src/main/resources/public/apis/terms-and-conditions-openapi.yml\"\n        }\n\n        //-----------------------------\n\n        OpenAPIKaratePlugin {\n            basePackage \"{{basePackage}}.adapters.web\"\n            testsPackage \"karate.webapp\"\n            apiFile \"src/main/resources/public/apis/webapp-openapi.yml\"\n        }\n        OpenAPIKaratePlugin {\n            basePackage \"{{basePackage}}.adapters.web\"\n            testsPackage \"karate.mobile\"\n            apiFile \"src/main/resources/public/apis/mobile-openapi.yml\"\n        }\n        OpenAPIKaratePlugin {\n            basePackage \"{{basePackage}}.adapters.web\"\n            testsPackage \"karate.surveys.backoffice\"\n            apiFile \"src/main/resources/public/apis/surveys-backoffice-openapi.yml\"\n        }\n        OpenAPIKaratePlugin {\n            basePackage \"{{basePackage}}.adapters.web\"\n            testsPackage \"karate.surveys.api\"\n            apiFile \"src/main/resources/public/apis/surveys-public-openapi.yml\"\n        }\n\n    }\n}\n","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/zenwave-scripts.zw:full"},{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/models/clinical.zdl","originalUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/models/clinical.zdl","sourceUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/models/clinical.zdl","language":"zdl","visibleRange":null,"content":"config {\n    title \"Clinical Tool Backend\"\n    layout.moduleBasePackage \"io.zenwave360.example.clinicaltool.modules.clinical\"\n    // you can choose different layouts, see docs at https://www.zenwave360.io/docs/\n    layout CleanHexagonalProjectLayout\n}\n\n@aggregate\nentity Hospital {\n    name String required unique maxlength(254)\n    lang String required maxlength(3) /** Primary language of the hospital */\n    timezone String required maxlength(3) /** ECT (Europe/Madrid)  */\n}\n\n@aggregate\n@auditing\nentity Doctor {\n    userId Long\n    profilePictureId Long\n    hospitalId Long required\n    name String required maxlength(100)\n    surname String required maxlength(100)\n    surname2 String maxlength(100)\n    email String maxlength(100) pattern(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/)\n    phoneNumber String maxlength(20)\n    lang String maxlength(3) /** Primary language of the doctor */\n}\n\n@aggregate\n@auditing\nentity Patient {\n    userId Long\n    spikeUUID String /** se modifica directamente via Spike webhook en WearableDataRepository */\n    hospitalId Long required\n    profilePictureId Long\n\n    @naturalId\n    phoneNumber String required maxlength(20)\n    @naturalId\n    hisNumber String required maxlength(100)\n\n    email String required maxlength(100) pattern(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/)\n\n    generalInfo GeneralInfo {\n        name String required maxlength(100)\n        surname String required maxlength(100)\n        surname2 String maxlength(100)\n        identityDocumentType IdentityDocumentType required\n        identityDocumentNumber String required maxlength(20)\n        birthDate LocalDate required\n        gender GenderType required\n        lang String maxlength(3) /** Primary language of the patient */\n    }\n\n    healthInsuranceInfo HealthInsuranceInfo {\n        insuranceCompanyId String required maxlength(100)\n        insuranceCardNumber String required maxlength(20)\n    }\n\n    @json documentIds Long[]\n}\n\nrelationship OneToMany {\n    Patient{medicalContacts required } to MedicalContact{patient required}\n    Patient{personalContacts required } to PersonalContact{patient required}\n    Patient{patientAddresses required } to PatientAddress{patient required}\n    Patient{hospitalAddresses required } to HospitalAddress{patient required}\n    Patient{patientWearables required } to PatientWearable{patient required}\n}\n\n@aggregate\nentity ProvisionalPatient {\n    @naturalId\n    phoneNumber String required maxlength(20)\n    @naturalId\n    hisNumber String required maxlength(100)\n    @json patient Patient\n}\n\n@skip\nentity Address {\n   street String required maxlength(100)\n   city String required maxlength(100)\n   postalCode String required maxlength(10)\n   countryCode String required maxlength(3)\n   additionalInfo String maxlength(254)\n}\n\n@copy(Address)\nentity PatientAddress {\n   current Boolean required\n}\n\n@copy(Address)\nentity HospitalAddress {\n}\n\nenum IdentityDocumentType {\n    DNI(1), NIE(2), PASSPORT(3)\n}\n\nenum GenderType {\n    MALE(1), FEMALE(2), OTHER(3)\n}\n\n\nentity PatientWearable {\n    wearableType String required\n    serialNumber String maxlength(20)\n}\n\n\nentity MedicalContact {\n    name String required maxlength(100)\n    surname String required maxlength(100)\n    surname2 String maxlength(100)\n    hospital String maxlength(254)\n    area String maxlength(100)\n    jobPosition String maxlength(100)\n    phoneNumber String required maxlength(20)\n    email String required maxlength(100) pattern(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/)\n}\n\nentity PersonalContact {\n    name String required maxlength(100)\n    surname String required maxlength(100)\n    surname2 String maxlength(100)\n    phoneNumber String required maxlength(20)\n    email String required maxlength(100) pattern(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/)\n    patientRelationshipType PatientRelationshipType\n    emergencyContact Boolean required\n}\n\nenum PatientRelationshipType {\n    SON_DAUGTHER(1), CARE_GIVER(2), OTHER(3)\n}\n\n@inline\ninput HospitalId {\n    hospitalId Long required\n}\n\n@inline\ninput CriterioPatient {\n    hisNumber String required maxlength(100)\n    phoneNumber String required maxlength(20)\n}\n\noutput PatientHospital {\n    patientId Long\n    hospitalId Long\n    hisNumber String\n    fullName String\n    gender GenderType\n    dni String\n    birthDate LocalDate\n    phone String\n    email String\n    insuranceCardNumber String\n    address String\n}\n\n@rest\nservice HospitalService for (Hospital, Doctor) {\n    @get(\"/hospitals/{id}\")\n    getHospital(id) Hospital?\n    @post(\"/hospitals\")\n    createHospital(Hospital) Hospital\n    @put(\"/hospitals/{id}\")\n    updateHospital(id, Hospital) Hospital?\n    @get(\"/hospitals\")\n    listHospitals() Hospital[]\n\n    @post(\"/doctors\")\n    createDoctor(Doctor) Doctor withEvents DoctorCreated\n    @put(\"/doctors/{id}\")\n    updateDoctor(id, Doctor) Doctor?\n    @get(\"/doctors/{id}\")\n    getDoctor(id) Doctor?\n    @get(\"/doctors\")\n    listDoctors() Doctor[]\n\n    @get(\"/hospital/{hospitalId}/doctors\")\n    @entityForId(Hospital)\n    listHospitalDoctors(HospitalId) Doctor[]\n\n    @get(\"/hospital/{hospitalId}/patients\")\n    @entityForId(Hospital)\n    listHospitalPatients(HospitalId) PatientHospital[]\n}\n\ninput DocumentSignatureRequestedInput {\n    documentInfoId Long required\n    patientId Long required\n}\n\n@rest\nservice PatientsService for (Patient, ProvisionalPatient) {\n    /**\n    * Loads a saved temporal patient or new one if not found.\n    */\n    @get(\"/patients/{hisNumber}/{phoneNumber}\")\n    loadPatient(@natural id) Patient\n\n    /**\n    * Persist a temporal patient in the database.\n    */\n    @patch(\"/patients/{hisNumber}/{phoneNumber}\")\n    partialPatientUpdate(@natural id, Patient) Patient\n\n    /**\n    * Persite a patient in the database and deletes any temporal data.\n    */\n    @post(\"/patients\")\n    createPatient(Patient) Patient withEvents PatientCreated\n\n    /**\n    * Updates a patient in the database.\n    */\n    @put(\"/patients/{id}\")\n    updatePatient(id, Patient) Patient?\n\n    /**\n    * Load a patient by id\n    */\n    @get(\"/patients/{id}\")\n    getPatient(id) Patient?\n\n    /**\n    * Load a patient profile by id to mobile app.\n    */\n    @get(\"/patients/{id}/profile\")\n    @policies(isMobile)\n    @entityForId(Patient)\n    getPatientProfileById(id) PatientProfile\n\n    @post({ path: \"/patients/{id}/opt-out\", status: 200 })\n    @entityForId(Patient)\n    requestOptOut(id)\n\n    @listener({model: \"models/documents.zdl\", event: DocumentSignatureRequested})\n    associateDocumentWithPatient(DocumentSignatureRequestedInput)\n}\n\noutput PatientProfile {\n    name String required maxlength(100)\n    surname String required maxlength(100)\n    surname2 String maxlength(100)\n    birthDate LocalDate required\n    gender GenderType required\n    phoneNumber String required maxlength(20)\n}\n\nevent DoctorCreated {\n    doctor Doctor\n}\n\nevent PatientCreated {\n    patient Patient\n}\n","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/models/clinical.zdl:full"},{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/models/users.zdl","originalUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/models/users.zdl","sourceUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/models/users.zdl","language":"zdl","visibleRange":null,"content":"config {\n    title \"User Management\"\n    layout.moduleBasePackage \"io.zenwave360.example.clinicaltool.modules.users\"\n    // you can choose: DefaultProjectLayout, CleanHexagonalProjectLayout, LayeredProjectLayout, SimpleDomainProjectLayout, HexagonalProjectLayout, CleanArchitectureProjectLayout\n    layout SimpleDomainProjectLayout\n}\n\n@aggregate\n@auditing\nentity User (application_user) {\n    name String\n    @naturalId\n    username String required unique\n    email String required unique\n    password String\n\n    @set\n    roles String[] required\n\n    enabled Boolean\n    credentialsNonExpired Boolean\n    accountNonExpired Boolean\n    accountNonLocked Boolean\n\n    @jsonb additionalProperties Map\n}\n\ninput SearchCriteria {\n    username String\n    email String\n    role String\n    enabled Boolean\n    searchTerms Map\n}\n\n@rest(\"/users\")\nservice UserService for (User) {\n\n    @get(\"/{username}\")\n    findByUsername(@natural id) User?\n\n    @post\n    createUser(User) User\n    @put(\"/{username}\")\n    updateUser(@natural id, User) User?\n\n    @put(path: \"/{username}/lock\", status: 200)\n    lockAccount(@natural id) User?\n    @put(path: \"/{username}/unlock\", status: 200)\n    unLockAccount(@natural id) User?\n    @delete(\"/{username}\")\n    deleteUser(@natural id)\n\n    @post(path: \"/search\", status: 200) @paginated\n    searchUsers(SearchCriteria) User[]\n    @get(\"/list\") @paginated\n    listUsers() User[]\n}\n","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/models/users.zdl:full"},{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/models/documents.zdl","originalUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/models/documents.zdl","sourceUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/models/documents.zdl","language":"zdl","visibleRange":null,"content":"config {\n    title \"Documents Model\"\n    layout.moduleBasePackage \"io.zenwave360.example.clinicaltool.modules.documents\"\n    // you can choose: DefaultProjectLayout, CleanHexagonalProjectLayout, LayeredProjectLayout, SimpleDomainProjectLayout, HexagonalProjectLayout, CleanArchitectureProjectLayout\n    layout SimpleDomainProjectLayout\n}\n\n@aggregate\nentity DocumentInfo {\n    uuid String\n    fileName String required\n    documentType String required\n    contentType String required\n    tags String[]\n}\n\nentity DocumentData {\n    data Blob required\n}\n\nrelationship OneToOne {\n    DocumentInfo{documentData required } to @Id DocumentData{document required}\n}\n\n@inline\ninput DocumentIds {\n    documentIds Long[]\n}\n\n@rest(\"/documents\")\nservice DocumentService for (DocumentInfo) {\n\n    @get({path: \"/\"})\n    listDocumentInfo(DocumentIds) DocumentInfo[]\n\n    @get({path: \"/{id}\", params: {preview: boolean} })\n    @filedownload(\"documentData.data\")\n    downloadDocument(id) DocumentInfo\n\n    @post({path: \"/upload\", status: 201})\n    @fileupload(\"file\")\n    uploadDocument(DocumentInfo) DocumentInfo\n\n    @delete({path: \"/{id}\", status: 204})\n    deleteDocumentInfo(id)\n}\n","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/models/documents.zdl:full"},{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/models/masterdata.zdl","originalUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/models/masterdata.zdl","sourceUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/models/masterdata.zdl","language":"zdl","visibleRange":null,"content":"config {\n    title \"Master Data\"\n    layout.moduleBasePackage \"io.zenwave360.example.clinicaltool.modules.masterdata\"\n    // you can choose: DefaultProjectLayout, CleanHexagonalProjectLayout, LayeredProjectLayout, SimpleDomainProjectLayout, HexagonalProjectLayout, CleanArchitectureProjectLayout\n    layout SimpleDomainProjectLayout\n}\n\n@aggregate\nentity MasterData {\n    @naturalId\n    type MasterDataType required\n    @naturalId\n    key String required maxlength(254)\n    value String required maxlength(254)\n    @jsonb translations MasterDataTranslation[] {\n        lang String required\n        text String required\n    }\n}\n\nenum MasterDataType {\n    GENDER(1)\n    ID_DOCUMENT_TYPE(2)\n    COUNTRY(3)\n    INSURANCE_COMPANY(4)\n    MEDICAL_AREA(5)\n}\n\noutput MasterDataKeyValue {\n    key String\n    value String\n}\n\n@inline\ninput MasterDataFilter {\n    type MasterDataType\n    lang String\n}\n\n@rest(\"/masterdata\")\nservice MasterDataService for (MasterData) {\n    @post\n    createMasterData(MasterData) MasterData\n    @get(\"/{id}\")\n    getMasterData(id) MasterData?\n    @put(\"/{id}\")\n    updateMasterData(id, MasterData) MasterData?\n    @get @paginated\n    listMasterData() MasterData[]\n    @delete(\"/{id}\")\n    deleteMasterData(id)\n\n    @get(\"/type/{type}/{lang}\")\n    listMasterDataOfType(MasterDataFilter) MasterDataKeyValue[]\n}\n","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/models/masterdata.zdl:full"},{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/models/surveys.zdl","originalUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/models/surveys.zdl","sourceUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/models/surveys.zdl","language":"zdl","visibleRange":null,"content":"config {\n    title \"Clinical Surveys Backend\"\n    layout.moduleBasePackage \"io.zenwave360.example.clinicaltool.modules.surveys\"\n    layout LayeredProjectLayout\n}\n\napis {\n    openapi(provider) BackOfficeAPI {\n        url \"src/main/resources/public/apis/surveys-backoffice-openapi.yml\"\n    }\n    openapi(provider) PublicAPI {\n        url \"src/main/resources/public/apis/surveys-public-openapi.yml\"\n    }\n}\n\n@aggregate\n@auditing\nentity Survey {\n    @naturalId\n    name String required maxlength(254) /** Unique identifier for the survey */\n    @naturalId\n    hospitalId Long required\n    title String required maxlength(254) /** Public title for the survey */\n    lang String required maxlength(3) /** Default language for this survey */\n    @jsonb sections SurveySection[] {\n        name String required maxlength(254) /** Unique identifier for the section */\n        translations SectionTranslation[] {\n            lang String required\n            title String required\n            summary String\n        }\n        questionIds Long[] /** Sorted List of Questions for this section */\n    }\n}\n\n@aggregate\n@auditing\nentity Question {\n    name String required unique maxlength(254) /** Unique identifier for the question */\n    questionType QuestionType required\n    required boolean = true\n    rangeStart Integer\n    rangeEnd Integer\n    @jsonb translations QuestionTranslation[] {\n        lang String required\n        text String required\n    }\n    @jsonb options Option[] { // mas facil mantener el orden que con OneToMany\n        name String required maxlength(254)\n        translations OptionTranslation[] {\n            lang String required\n            text String required\n        }\n    }\n    includeOther Boolean = false\n}\n\nenum QuestionType {\n    YES_NO(1), MULTIPLE_SELECTION(2), SINGLE_SELECTION(3), TEXT(4), NUMBER(5), DECIMAL(6), RANGE(7),\n}\n\n@aggregate\n@auditing\nentity SurveyAnswers {\n    @naturalId\n    surveyId Long required\n    @naturalId\n    patientId Long required\n    @naturalId\n    date LocalDate required\n    lang String required\n    @jsonb answers Answer[] {\n        questionId Long required\n        value String\n        values String[]\n        otherValue String\n    }\n}\n\n\ninput SurveysByHospital {\n    hospitalId Long required\n    lang String maxlength(3)\n}\n\n/**\n* Service for managing surveys and questions in the backoffice.\n*/\n@apis(BackOfficeAPI)\n@rest(\"/backoffice/surveys\")\nservice SurveysBackofficeService for (Survey, Question) {\n    @get\n    listSurveys() Survey[]\n    @get(\"/{id}\")\n    getSurvey(id) Survey?\n    @post\n    createSurvey(Survey) Survey\n    @put(\"/{id}\")\n    updateSurvey(id, Survey) Survey?\n    @delete(\"/{id}\")\n    @entityForId(Survey)\n    deleteSurvey(id)\n\n    @get(\"/questions\")\n    listQuestions() Question[]\n    @get(\"/questions/{id}\")\n    getQuestion(id) Question?\n    @post(\"/questions\")\n    createQuestion(Question) Question\n    @put(\"/questions/{id}\")\n    updateQuestion(id, Question) Question?\n    @entityForId(Question)\n    @delete(\"/questions/{id}\")\n    deleteQuestion(id)\n}\n\n/**\n* This object represent a full survey with all the questions and options translated to the patient language.\n*/\noutput SurveyAndQuestions {\n    surveyId Long required /** Persistence identifier for the survey */\n    name String required maxlength(254) /** Unique identifier for the survey across all environments */\n    title String required maxlength(254) /** Public title for the survey */\n    hospitalId Long required\n    lang String required maxlength(3) /** Default language for this survey */\n    sections SurveySectionOutput[] {\n        name String required maxlength(254) /** Unique identifier for the section */\n        title String required maxlength(254) /** Public title for the section */\n        summary String\n        questions QuestionTranslationOutput[] {\n            questionId Long required\n            required boolean = true\n            rangeStart Integer\n            rangeEnd Integer\n            text String required maxlength(254) /** Translated text for the question */\n            questionType QuestionType required\n            options OptionTranslationOutput[] {\n                name String required maxlength(254) /** Internal name for the option */\n                text String required /** Translated text for the option */\n            }\n            includeOther boolean = false\n        }\n    }\n}\n\n@inline\ninput SurveyByNameAndPatient {\n    name String required maxlength(254)\n    patientId Long required\n    lang String maxlength(3)\n}\n\n/**\n* Public service to get Surveys and Questions for a patient and to answer the survey.\n*/\n@apis(PublicAPI)\n@rest(\"/public/surveys\")\nservice SurveysService for (SurveyAnswers) {\n\n    @get({ path: \"/{name}/patient/{patientId}/questions\", params: { lang: String } })\n    getSurveyAndQuestionsForPatient(SurveyByNameAndPatient) SurveyAndQuestions\n\n    @post(\"/{surveyId}/patient/{patientId}/answers/{date}\")\n    answerSurvey(@natural id, SurveyAnswers) SurveyAnswers\n\n    @patch({ path: \"/{surveyId}/patient/{patientId}/answers/{date}\", params: { surveryId: Long } })\n    updateSurveyAnswers(@natural id, SurveyAnswers) SurveyAnswers?\n\n    @get(\"/{surveyId}/patient/{patientId}/answers/{date}\")\n    getSurveyAnswers(@natural id) SurveyAnswers?\n\n}\n\n","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/models/surveys.zdl:full"},{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/models/terms-and-conditions.zdl","originalUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/models/terms-and-conditions.zdl","sourceUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/models/terms-and-conditions.zdl","language":"zdl","visibleRange":null,"content":"config {\n    title \"Clinical Terms And Conditions Backend\"\n    layout.moduleBasePackage \"io.zenwave360.example.clinicaltool.modules.termsandconditions\"\n    // you can choose: DefaultProjectLayout, CleanHexagonalProjectLayout, LayeredProjectLayout, SimpleDomainProjectLayout, HexagonalProjectLayout, CleanArchitectureProjectLayout\n    layout SimpleDomainProjectLayout\n\n}\n\n\n@aggregate\nentity AcceptedTermsAndConditions {\n    @naturalId\n    userId Long required\n    termsAndConditionsId Long required\n    acceptedDate Instant required\n}\n\n@aggregate\nentity TermsAndConditions {\n    content TextBlob required\n    lang String required maxlength(3) /** language code */\n    contentVersion String unique required /** Arbitrary version string */\n    startDate LocalDate unique required /** Date when the terms and conditions are valid (inclusive) */\n}\n\n@inline\ninput Lang {\n    lang String required maxlength(3) /** language code */\n}\n\ninput AcceptedTermsAndConditionsInput {\n    termsAndConditionsId Long required\n}\n\n@rest(\"/terms-and-conditions\")\nservice TermsAndConditionsService for (AcceptedTermsAndConditions, TermsAndConditions) {\n    @get\n    listTermsAndConditions() TermsAndConditions[]\n    @get(\"/{id}\")\n    getTermsAndConditions(id) TermsAndConditions?\n    @post\n    createTermsAndConditions(TermsAndConditions) TermsAndConditions\n    @put(\"/{id}\")\n    updateTermsAndConditions(id, TermsAndConditions) TermsAndConditions?\n\n    @get(\"/latest/{lang}\")\n    getCurrentTermsAndConditions(Lang) TermsAndConditions?\n    @post({ path: \"/accept\", status: 200 })\n    acceptTermsAndConditions(AcceptedTermsAndConditionsInput)\n}\n","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/models/terms-and-conditions.zdl:full"},{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/zenwave-scripts.zw","originalUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/zenwave-scripts.zw","sourceUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/zenwave-scripts.zw#L1-L11","language":"zdl","visibleRange":"1,11","content":"config {\n    title \"Clinical Tool Backend\"\n    basePackage \"io.zenwave360.example.clinicaltool\"\n    persistence jpa\n    databaseType postgresql\n\n    layout.commonPackage \"{{basePackage}}.common\"\n    layout.infrastructureRepositoryCommonPackage \"{{commonPackage}}\"\n    layout.adaptersWebMappersCommonPackage \"{{commonPackage}}.mappers\"\n    layout.coreImplementationMappersCommonPackage \"{{commonPackage}}.mappers\"\n","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/zenwave-scripts.zw:1,11"},{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/models/clinical.zdl","originalUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/models/clinical.zdl","sourceUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/models/clinical.zdl#L1-L6","language":"zdl","visibleRange":"1,6","content":"config {\n    title \"Clinical Tool Backend\"\n    layout.moduleBasePackage \"io.zenwave360.example.clinicaltool.modules.clinical\"\n    // you can choose different layouts, see docs at https://www.zenwave360.io/docs/\n    layout CleanHexagonalProjectLayout\n}","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/models/clinical.zdl:1,6"},{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/models/clinical.zdl","originalUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/models/clinical.zdl","sourceUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/models/clinical.zdl#L197-L243","language":"zdl","visibleRange":"197,243","content":"@rest\nservice PatientsService for (Patient, ProvisionalPatient) {\n    /**\n    * Loads a saved temporal patient or new one if not found.\n    */\n    @get(\"/patients/{hisNumber}/{phoneNumber}\")\n    loadPatient(@natural id) Patient\n\n    /**\n    * Persist a temporal patient in the database.\n    */\n    @patch(\"/patients/{hisNumber}/{phoneNumber}\")\n    partialPatientUpdate(@natural id, Patient) Patient\n\n    /**\n    * Persite a patient in the database and deletes any temporal data.\n    */\n    @post(\"/patients\")\n    createPatient(Patient) Patient withEvents PatientCreated\n\n    /**\n    * Updates a patient in the database.\n    */\n    @put(\"/patients/{id}\")\n    updatePatient(id, Patient) Patient?\n\n    /**\n    * Load a patient by id\n    */\n    @get(\"/patients/{id}\")\n    getPatient(id) Patient?\n\n    /**\n    * Load a patient profile by id to mobile app.\n    */\n    @get(\"/patients/{id}/profile\")\n    @policies(isMobile)\n    @entityForId(Patient)\n    getPatientProfileById(id) PatientProfile\n\n    @post({ path: \"/patients/{id}/opt-out\", status: 200 })\n    @entityForId(Patient)\n    requestOptOut(id)\n\n    @listener({model: \"models/documents.zdl\", event: DocumentSignatureRequested})\n    associateDocumentWithPatient(DocumentSignatureRequestedInput)\n}","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/models/clinical.zdl:197,243"},{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/zenwave-scripts.zw","originalUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/zenwave-scripts.zw","sourceUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/zenwave-scripts.zw#L27-L39","language":"zdl","visibleRange":"27,39","content":"        ZDLToOpenAPIPlugin {\n            title \"Clinical Tool - WebApp API\"\n            zdlFiles \"models/clinical.zdl\"\n            targetFile \"src/main/resources/public/apis/webapp-openapi.yml\"\n            operationIdsToExclude \"getPatientProfileById\"\n        }\n\n        ZDLToOpenAPIPlugin {\n            title \"Clinical Tool - Mobile API\"\n            zdlFiles \"models/clinical.zdl\"\n            targetFile \"src/main/resources/public/apis/mobile-openapi.yml\"\n            operationIdsToInclude \"getPatientProfileById,requestOptOut\"\n        }","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/zenwave-scripts.zw:27,39"},{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/zenwave-scripts.zw","originalUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/zenwave-scripts.zw","sourceUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/zenwave-scripts.zw#L116-L124","language":"zdl","visibleRange":"116,124","content":"        OpenAPIControllersPlugin {\n            zdlFiles \"models/clinical.zdl\"\n            openapiFile \"src/main/resources/public/apis/webapp-openapi.yml\"\n\n            layout.customWebModule \"{{basePackage}}.modules.web.webapp\"\n            layout.adaptersWebPackage \"{{layout.customWebModule}}\"\n            layout.openApiApiPackage \"{{layout.customWebModule}}\"\n            layout.openApiModelPackage \"{{layout.customWebModule}}.dtos\"\n        }","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/zenwave-scripts.zw:116,124"},{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/zenwave-scripts.zw","originalUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/zenwave-scripts.zw","sourceUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/zenwave-scripts.zw#L126-L134","language":"zdl","visibleRange":"126,134","content":"        OpenAPIControllersPlugin {\n            zdlFiles \"models/clinical.zdl\"\n            openapiFile \"src/main/resources/public/apis/mobile-openapi.yml\"\n\n            layout.customWebModule \"{{basePackage}}.modules.web.mobile\"\n            layout.adaptersWebPackage \"{{layout.customWebModule}}\"\n            layout.openApiApiPackage \"{{layout.customWebModule}}\"\n            layout.openApiModelPackage \"{{layout.customWebModule}}.dtos\"\n        }","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/zenwave-scripts.zw:126,134"},{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/zenwave-scripts.zw","originalUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/zenwave-scripts.zw","sourceUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/zenwave-scripts.zw#L41-L53","language":"zdl","visibleRange":"41,53","content":"        ZDLToOpenAPIPlugin {\n            title \"Surveys - Backoffice API\"\n            zdlFile \"models/surveys.zdl\"\n            targetFile \"src/main/resources/public/apis/surveys-backoffice-openapi.yml\"\n            operationIdsToExclude \"getSurveyAndQuestionsForPatient,answerSurvey,updateSurveyAnswers,getSurveyAnswers\"\n        }\n\n        ZDLToOpenAPIPlugin {\n            title \"Surveys - Public API\"\n            zdlFile \"models/surveys.zdl\"\n            targetFile \"src/main/resources/public/apis/surveys-public-openapi.yml\"\n            operationIdsToInclude \"getSurveyAndQuestionsForPatient,answerSurvey,updateSurveyAnswers,getSurveyAnswers\"\n        }","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/zenwave-scripts.zw:41,53"},{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/models/clinical.zdl","originalUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/models/clinical.zdl","sourceUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/models/clinical.zdl#L136-L144","language":"zdl","visibleRange":"136,144","content":"}\n\n@inline\ninput HospitalId {\n    hospitalId Long required\n}\n\n@inline\ninput CriterioPatient {","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/models/clinical.zdl:136,144"},{"url":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/src/main/java/io/zenwave360/example/clinicaltool/modules/documents/DocumentApiController.java","originalUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/src/main/java/io/zenwave360/example/clinicaltool/modules/documents/DocumentApiController.java","sourceUrl":"https://github.com/ZenWave360/zenwave-playground/blob/main/examples/modulith-clinical-tool-jpa/src/main/java/io/zenwave360/example/clinicaltool/modules/documents/DocumentApiController.java#L63-L73","language":"java","visibleRange":"63,73","content":"    public ResponseEntity<Resource> downloadDocument(Long id, Boolean preview) {\n        log.debug(\"REST request to downloadDocument: {}, {}\", id, preview);\n        var documentInfo = documentService.downloadDocument(id);\n        byte[] bytes = null; // TODO get bytes from documentData.data\n        ByteArrayResource resource = new ByteArrayResource(bytes);\n        return ResponseEntity\n                .status(200)\n                .header(\"Content-Disposition\", \"inline\") // or attachment; filename=example.pdf\n                .contentType(MediaType.APPLICATION_OCTET_STREAM) // TODO: set content type\n                .body(resource);\n    }","cacheKey":"https://raw.githubusercontent.com/ZenWave360/zenwave-playground/refs/heads/main/examples/modulith-clinical-tool-jpa/src/main/java/io/zenwave360/example/clinicaltool/modules/documents/DocumentApiController.java:63,73"}]}}}