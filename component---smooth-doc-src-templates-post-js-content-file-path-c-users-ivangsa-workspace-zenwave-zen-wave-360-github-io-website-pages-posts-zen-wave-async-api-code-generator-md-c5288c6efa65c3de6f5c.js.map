{"version":3,"file":"component---smooth-doc-src-templates-post-js-content-file-path-c-users-ivangsa-workspace-zenwave-zen-wave-360-github-io-website-pages-posts-zen-wave-async-api-code-generator-md-c5288c6efa65c3de6f5c.js","mappings":"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","sources":["webpack://website/./pages/posts/ZenWave-AsyncAPI-Code-Generator.md","webpack://website/../smooth-doc/src/templates/post.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h2: \"h2\",\n    a: \"a\",\n    div: \"div\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\",\n    pre: \"pre\",\n    h3: \"h3\",\n    blockquote: \"blockquote\",\n    em: \"em\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, React.createElement(_components.img, {\n    src: \"./ZenWave360-AsyncAPI-SpringCloudStreams.excalidraw.svg\",\n    alt: \"AsyncAPI and Spring Cloud Streams 3\"\n  })), \"\\n\", React.createElement(_components.h2, {\n    id: \"api-first-with-asyncapi-and-zenwave-sdk\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#api-first-with-asyncapi-and-zenwave-sdk\",\n    \"aria-label\": \"api first with asyncapi and zenwave sdk permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"API-First with AsyncAPI and ZenWave SDK\"), \"\\n\", React.createElement(_components.p, null, \"With ZenWave's \", React.createElement(_components.code, null, \"spring-cloud-streams3\"), \" and \", React.createElement(_components.code, null, \"jsonschema2pojo\"), \" plugins you can generate:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Strongly typed \", React.createElement(_components.strong, null, \"business interfaces\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Payload DTOs\"), \" and\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Header objects\"), \" from AsyncAPI definitions.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"It uses Spring Cloud Streams as default implementation, so it can connect to many different brokers via provided binders.\"), \"\\n\", React.createElement(_components.p, null, \"And because everything is hidden behind interfaces we can encapsulate many Enterprise Integration Patterns:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Transactional Outbox: with MongoDB ChangeStreams, Plain SQL and Debezium SQL flavors\"), \"\\n\", React.createElement(_components.li, null, \"Business DeadLetter Queues: allowing you to route different business Exceptions to different DeadLetter queues for non-retrayable errors.\"), \"\\n\", React.createElement(_components.li, null, \"Enterprise Envelope: when your organization uses a common Envelope for messages, you can still express your AsyncAPI definition in terms of your business payload.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"See \", React.createElement(_components.a, {\n    href: \"https://www.zenwave360.io/zenwave-sdk/plugins/asyncapi-spring-cloud-streams3/#options\"\n  }, \"AsyncAPI and Spring Cloud Streams 3 Configuration Options\"), \" and \", React.createElement(_components.a, {\n    href: \"/ZenWave-Code-Generator/Maven-Plugin\"\n  }, \"ZenWave Maven Plugin\"), \" for more details.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-xml\"\n  }, \"<plugin>\\r\\n    <groupId>io.zenwave360.sdk</groupId>\\r\\n    <artifactId>zenwave-sdk-maven-plugin</artifactId>\\r\\n    <version>${zenwave.version}</version>\\r\\n    <configuration>\\r\\n        <inputSpec>classpath:/model/asyncapi.yml</inputSpec>\\r\\n        <addCompileSourceRoot>true</addCompileSourceRoot>\\r\\n        <addTestCompileSourceRoot>true</addTestCompileSourceRoot>\\r\\n    </configuration>\\r\\n    <executions>\\r\\n        <!-- DTOs -->\\r\\n        <execution>\\r\\n            <id>generate-asyncapi-dtos</id>\\r\\n            <phase>generate-sources</phase>\\r\\n            <goals>\\r\\n                <goal>generate</goal>\\r\\n            </goals>\\r\\n            <configuration>\\r\\n                <generatorName>jsonschema2pojo</generatorName>\\r\\n                <configOptions>\\r\\n                    <modelPackage>io.zenwave360.example.core.domain.events</modelPackage>\\r\\n                    <!--        <jsonschema2pojo.includeTypeInfo>true</jsonschema2pojo.includeTypeInfo>-->\\r\\n                    <jsonschema2pojo.useLongIntegers>true</jsonschema2pojo.useLongIntegers>\\r\\n                </configOptions>\\r\\n            </configuration>\\r\\n        </execution>\\r\\n        <!-- Generate PROVIDER -->\\r\\n        <execution>\\r\\n            <id>generate-asyncapi</id>\\r\\n            <phase>generate-sources</phase>\\r\\n            <goals>\\r\\n                <goal>generate</goal>\\r\\n            </goals>\\r\\n            <configuration>\\r\\n                <generatorName>spring-cloud-streams3</generatorName>\\r\\n                <configOptions>\\r\\n                    <role>provider</role>\\r\\n                    <style>imperative</style>\\r\\n                    <transactionalOutbox>mongodb</transactionalOutbox>\\r\\n                    <modelPackage>io.zenwave360.example.core.domain.events</modelPackage>\\r\\n                    <producerApiPackage>io.zenwave360.example.core.outbound.events</producerApiPackage>\\r\\n                    <consumerApiPackage>io.zenwave360.example.adapters.commands</consumerApiPackage>\\r\\n                </configOptions>\\r\\n            </configuration>\\r\\n        </execution>\\r\\n    </executions>\\r\\n\\r\\n    <dependencies>\\r\\n        <dependency>\\r\\n            <groupId>io.zenwave360.sdk.plugins</groupId>\\r\\n            <artifactId>asyncapi-spring-cloud-streams3</artifactId>\\r\\n            <version>${zenwave.version}</version>\\r\\n        </dependency>\\r\\n        <dependency>\\r\\n            <groupId>io.zenwave360.sdk.plugins</groupId>\\r\\n            <artifactId>asyncapi-jsonschema2pojo</artifactId>\\r\\n            <version>${zenwave.version}</version>\\r\\n        </dependency>\\r\\n    </dependencies>\\r\\n</plugin>\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.img, {\n    src: \"./spring-cloud-streams3-generated.png\",\n    alt: \"ZenWave StreamCloudStreams AsyncAPI\"\n  })), \"\\n\", React.createElement(_components.h3, {\n    id: \"provider-vs-client\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#provider-vs-client\",\n    \"aria-label\": \"provider vs client permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Provider vs Client\"), \"\\n\", React.createElement(_components.p, null, \"Because broker based API definitions are inherently \", React.createElement(_components.strong, null, \"symmetrical\"), \" it's difficult to establish the roles of client/server. ZenWave generates code based on \", React.createElement(_components.code, null, \"provider\"), \" and \", React.createElement(_components.code, null, \"client\"), \" roles, where a \", React.createElement(_components.code, null, \"provider\"), \" \\\"produces events\\\" and \\\"consumes commands\\\". See \", React.createElement(_components.a, {\n    href: \"API-First-with-AsyncAPI\"\n  }, \"API-First with AsyncAPI\"), \" page for more details on \\\"publish/subscribe\\\", \\\"producer/consumer\\\" and \\\"provider/client\\\" roles.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Write your AsyncAPI definitions from the \", React.createElement(_components.code, null, \"provider\"), \" perspective and then configure the code generator to generate either a \", React.createElement(_components.code, null, \"provider\"), \" or a \", React.createElement(_components.code, null, \"client\"), \".\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"If you still find confusing which is a provider and a client just use this rule: In a given messaging scenario, there can be only one provider of a message, while there can be multiple clients.. If the provider is producing messages, use the \", React.createElement(_components.code, null, \"publish\"), \" section. If the provider is consuming messages, use the \", React.createElement(_components.code, null, \"subscribe\"), \" section.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"spring-cloud-streams-producer-using-generated-code-to-produce-messages\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#spring-cloud-streams-producer-using-generated-code-to-produce-messages\",\n    \"aria-label\": \"spring cloud streams producer using generated code to produce messages permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Spring Cloud Streams Producer: Using generated code to produce messages\"), \"\\n\", React.createElement(_components.p, null, \"On the producer side generates:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Interface \", React.createElement(_components.code, null, \"ICustomerEventsProducer\"), \" to produce typed messages that uses your domain names: \", React.createElement(_components.code, null, \"onCustomerEvent\"), \", \", React.createElement(_components.code, null, \"CustomerEventPayload\"), \" and \", React.createElement(_components.code, null, \"CustomerEventPayloadHeaders\"), \".\"), \"\\n\", React.createElement(_components.li, null, \"Producer \", React.createElement(_components.code, null, \"@Component\"), \" \", React.createElement(_components.code, null, \"CustomerEventsProducer\"), \" you can autowire in your services.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"In order to produce messages all you need to do is @Autowire the generated producer as part of your code.\")), \"\\n\", React.createElement(_components.p, null, \"This producer component, because sits behind a business oriented interface, can be implemented in different flavors and integration patterns like transactional outbox (for mongodb and sql) or enterprise envelop depending on how you configure zenwave maven generator.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"// Autogenerated: you can @Autowire it in your code\\r\\npublic interface ICustomerEventsProducer {\\r\\n    // headers object omitted for brevity\\r\\n    /**\\r\\n     * Customer Domain Events\\r\\n     */\\r\\n    boolean onCustomerEvent(CustomerEventPayload payload, CustomerEventPayloadHeaders headers);\\r\\n\\r\\n}\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"// Autogenerated: add it to your autoscan packages\\r\\n@Component\\r\\npublic class CustomerEventsProducer implements ICustomerEventsProducer {\\r\\n    \\r\\n    // details omitted for brevity\\r\\n    \\r\\n    /**\\r\\n     * Customer Domain Events\\r\\n     */\\r\\n    public boolean onCustomerEvent(CustomerEventPayload payload, CustomerEventPayloadHeaders headers) {\\r\\n        // this is one of the many flavors, you shouldn't need to worry about the details\\r\\n        log.debug(\\\"Sending message to topic: {}\\\", onCustomerEventBindingName);\\r\\n        Message message = MessageBuilder.createMessage(payload, new MessageHeaders(headers));\\r\\n        return streamBridge.send(onCustomerEventBindingName, message);\\r\\n    }\\r\\n}\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"// Autowire this producer in your code\\r\\n@Autowired\\r\\nICustomerEventsProducer customerEventsProducer;\\r\\n\\r\\n// and use it to produce messages\\r\\nvar message = new CustomerEventPayload()\\r\\n        .withCustomerId(\\\"123\\\")\\r\\n        // [...] set some more data\\r\\n        .withEventType(CustomerEventPayload.EventType.CREATED);\\r\\n// notice how headers are also strongly typed\\r\\nvar headers = new ICustomerEventsProducer.CustomerEventPayloadHeaders()\\r\\n        .entityId(\\\"123\\\")\\r\\n        .commonHeader(\\\"value\\\")\\r\\n        .set(\\\"undocumented-header\\\", \\\"value\\\");\\r\\n\\r\\ncustomerEventsProducer.onCustomerEvent(message, headers);\\n\")), \"\\n\", React.createElement(_components.h3, {\n    id: \"spring-cloud-streams-consumer-using-generated-code-to-consume-messages\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#spring-cloud-streams-consumer-using-generated-code-to-consume-messages\",\n    \"aria-label\": \"spring cloud streams consumer using generated code to consume messages permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Spring Cloud Streams Consumer: Using generated code to consume messages\"), \"\\n\", React.createElement(_components.p, null, \"On the consumer side generates:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Functional Consumer \", React.createElement(_components.code, null, \"DoCustomerRequestConsumer\"), \"  for Spring Cloud Streams bindings.\"), \"\\n\", React.createElement(_components.li, null, \"Business Interface \", React.createElement(_components.code, null, \"IDoCustomerRequestConsumerService\"), \" you need to implement in order to receive strongly typed messages.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"This Functional Consumer can abstract away different integration patterns like Business Dead Letter Queue and others... depending on how you configure zenwave maven generator.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"To consume messages you need to implement generated business interface and register it as a Spring bean.\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"// Autogenerated: you need to implement and provide this business interface\\r\\npublic interface IOnCustomerEventConsumerService {\\r\\n    /**\\r\\n     * Customer Domain Events\\r\\n     */\\r\\n    default void onCustomerEvent(CustomerEventPayload payload, CustomerEventPayloadHeaders headers) {};\\r\\n}\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"// Autogenerated: add it to your autoscan packages and provide business interface implementation\\r\\n@Component(\\\"on-customer-event\\\")\\r\\npublic class OnCustomerEventConsumer implements Consumer<Message<CustomerEventPayload>> {\\r\\n\\r\\n    // you need to implement this interface\\r\\n    protected IOnCustomerEventConsumerService service;\\r\\n\\r\\n    @Override\\r\\n    public void accept(Message<CustomerEventPayload> message) {\\r\\n        log.debug(\\\"Received message: {}\\\", message);\\r\\n        try {\\r\\n            Object payload = message.getPayload();\\r\\n            if (payload instanceof CustomerEventPayload) {\\r\\n                var headers = new IOnCustomerEventConsumerService.CustomerEventPayloadHeaders();\\r\\n                headers.putAll(message.getHeaders());\\r\\n                service.onCustomerEvent((CustomerEventPayload) payload, headers);\\r\\n                return;\\r\\n            }\\r\\n            log.error(\\\"Received message without any business handler: [payload: {}, message: {}]\\\", payload.getClass().getName(), message);\\r\\n        } catch (Exception e) {\\r\\n            // error handling and dead-letter-queue routing omitted for brevity\\r\\n        }\\r\\n    }\\r\\n}\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"// Implement the business interface and add it to your context\\r\\n@Component\\r\\nclass DoCustomerRequestConsumerService implements IDoCustomerRequestConsumerService {\\r\\n\\r\\n    @Override\\r\\n    public void doCustomerRequest(CustomerRequestPayload payload, CustomerRequestPayloadHeaders headers) {\\r\\n        log.info(\\\"Received '{}' message with payload: {}\\\", payload.getClass(), payload);\\r\\n        // [...] do something with this message\\r\\n    }\\r\\n}\\n\")), \"\\n\", React.createElement(_components.h3, {\n    id: \"exception-handling-with-business-dead-letter-queue\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#exception-handling-with-business-dead-letter-queue\",\n    \"aria-label\": \"exception handling with business dead letter queue permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Exception Handling with Business Dead Letter Queue\"), \"\\n\", React.createElement(_components.p, null, \"ZenWave SDK consumers can be configured to route exceptions to different error queues. This is useful to manage non-retryable business exceptions so the stream processing is not interrupted. If your code throws an exception not configured for error routing it will be rethrow and it will follow the standard error handling mechanism for your particular Spring Cloud Stream binder.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\"\n  }, \"spring.cloud.stream.bindings:\\r\\n    on-customer-event-in-0:\\r\\n      destination: customer.events\\r\\n      content-type: application/json\\r\\n      # configuring error routing for this consumer\\r\\n      dead-letter-queue-error-map: >\\r\\n        {\\r\\n          'javax.validation.ValidationException': 'on-customer-event-validation-error-out-0',\\r\\n          'java.lang.Exception': 'on-customer-event-error-out-0'\\r\\n        }\\n\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"populating-headers-at-runtime-automatically\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#populating-headers-at-runtime-automatically\",\n    \"aria-label\": \"populating headers at runtime automatically permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Populating Headers at Runtime Automatically\"), \"\\n\", React.createElement(_components.p, null, \"ZenWave SDK provides \", React.createElement(_components.code, null, \"x-runtime-expression\"), \" for automatic header population at runtime. Values for this extension property are:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"$message.payload#/<json pointer fragment>\"), \": follows the same format as AsyncAPI \", React.createElement(_components.a, {\n    href: \"https://www.asyncapi.com/docs/reference/specification/v2.5.0#correlationIdObject\"\n  }, \"Correlation ID\"), \" object.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"$tracingIdSupplier\"), \": will use the tracing id \", React.createElement(_components.code, null, \"java.function.Supplier\"), \" configured in your Spring context.\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\"\n  }, \"    CustomerEventMessage:\\r\\n      name: CustomerEventMessage\\r\\n      // [...] other properties omitted for brevity\\r\\n      headers:\\r\\n        type: object\\r\\n        properties:\\r\\n          kafka_messageKey:\\r\\n            type: string\\r\\n            description: This one will be populated automatically at runtime\\r\\n            x-runtime-expression: $message.payload#/customer/id\\r\\n          tracingId:\\r\\n            type: string\\r\\n            description: This one will be populated automatically at runtime\\r\\n            x-runtime-expression: $tracingIdSupplier\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-xml\"\n  }, \"<configOption>\\r\\n    <tracingIdSupplierQualifier>myTracingIdSupplier</tracingIdSupplierQualifier><!-- default is \\\"tracingIdSupplier\\\" -->\\r\\n    <runtimeHeadersProperty>x-custom-runtime-expression</runtimeHeadersProperty><!-- you can also override this extension property name -->\\r\\n</configOption>\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"    @Bean(\\\"myTracingIdSupplier\\\")\\r\\n    public Supplier tracingIdSupplier() {\\r\\n        return () -> \\\"test-tracing-id\\\";\\r\\n    }\\n\")), \"\\n\", React.createElement(_components.h3, {\n    id: \"inmemory-producers-as-testdoubles\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#inmemory-producers-as-testdoubles\",\n    \"aria-label\": \"inmemory producers as testdoubles permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"InMemory Producers as TestDoubles\"), \"\\n\", React.createElement(_components.p, null, \"Alongside the generated producer, ZenWave SDK also generates an \", React.createElement(_components.em, null, \"in-memory producer captor\"), \" that can be used as a test double and a singletone manual context so you easily include them in your unit/integration tests.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"// generated class, you can use in your tests\\r\\npublic class ProducerInMemoryContext {\\r\\n\\r\\n    public static final ProducerInMemoryContext INSTANCE = new ProducerInMemoryContext();\\r\\n\\r\\n\\r\\n    private CustomerEventsProducerCaptor customerEventsProducerCaptor = new CustomerEventsProducerCaptor();\\r\\n\\r\\n    public <T extends ICustomerEventsProducer> T customerEventsProducer() {\\r\\n        return (T) customerEventsProducerCaptor;\\r\\n    }\\r\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"And use it in your tests to instantiate your service and perform assertions in your tests. You can find \", React.createElement(_components.a, {\n    href: \"https://github.com/ivangsa/spring-boot-mongodb-elasticsearch-kafka-example/blob/e8fa9c89e5f3d72b90ac23749f636fc7640bdf39/src/test/java/io/zenwave360/example/core/implementation/CustomerUseCasesTest.java#L70\"\n  }, \"a working example here\"), \".\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"// example of how you can instantiate your service using the in-memory producer captor\\r\\npublic class InMemoryTestsManualContext extends InMemoryTestsConfig {\\r\\n\\r\\n    // [...] other beans omitted for brevity\\r\\n    \\r\\n    public CustomerUseCasesImpl customerUseCases() {\\r\\n        // instantiating a bean with in-memory dependencies\\r\\n        return new CustomerUseCasesImpl(customerRepository(), ProducerInMemoryContext.INSTANCE.customerEventsProducer());\\r\\n    }\\r\\n}\\r\\n\\r\\n// and using it in your tests to perform assertions\\r\\npublic class CustomerUseCasesTest {\\r\\n    \\r\\n    // this is the in-memory producer captor wired\\r\\n    CustomerEventsProducerCaptor customerEventsProducer = ProducerInMemoryContext.INSTANCE.customerEventsProducer();\\r\\n\\r\\n    @Test\\r\\n    void testCustomerUseCase() {\\r\\n        // [...] test your use case\\r\\n        Assertions.assertEquals(3, customerEventsProducer.getCapturedMessages(customerEventsProducer.onCustomerEventBindingName).size());\\r\\n    }\\r\\n}\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"C:/Users/ivangsa/workspace/zenwave/ZenWave360.github.io/website/pages/posts/ZenWave-AsyncAPI-Code-Generator.md\";\nimport {graphql} from \"gatsby\";\nexport const postQuery = graphql`\n  query PostPage($id: String!) {\n    mdx(id: { eq: $id }) {\n      fields {\n        pageType\n        title\n      }\n    }\n  }\n`;\nfunction PostTemplate({children}) {\n  return children;\n}\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","img","h2","a","div","code","ul","li","strong","pre","h3","blockquote","em","_provideComponents","components","React","src","alt","id","style","position","href","className","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","PostTemplate","children","_ref","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}